# -*- coding: utf-8 -*-
"""Untitled30.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Eb3eGaFkmc4eaK3Cszn08rbgmv-pZ6U3
"""

!pip install durable_rules
from durable.lang import *

#디바이스타입별 사용가능 슬롯타입
VA = {'slot_type' : ('Elect')}
VB = {'slot_type' : ('Elect','Temp')}
VC = {'slot_type' : ('Elect','Temp')}
SA = {'slot_type' : ('Elect','Temp','Humi')}

#전기센서 세종류
sensor_elect_3 = ('UHF' , 'SHF', 'EHF')
#온도센서 네종류
sensor_temp_4 = ('RTD' , 'NTC', 'Thermocouple' , 'Semiconductor')


with ruleset('engineering'):    

  #슬롯엔지니어링 진행
  @when_all((+m.slot_type) & (m.slot_en == -1))
  def chkSlotType(c):
    if c.m.device_type == 'VA':      
      if c.m.slot_type in VA['slot_type']:
        print('{0} 슬롯타입 엔지니어링 성공 -> {1} match {2}'.format(c.m.name , c.m.device_type, c.m.slot_type))
        post('engineering',{'name':c.m.name, 'device_type':c.m.device_type, 'slot_type':c.m.slot_type, 'slot_en':1})
      else:
        print('{0} 슬롯타입 엔지니어링 실패 {1} 타입의 슬롯만 엔지니어링 가능합니다'.format(c.m.name, VA['slot_type']))        
    elif c.m.device_type == 'VB':      
      if c.m.slot_type in VB['slot_type']:
        print('{0} 슬롯타입 엔지니어링 성공 -> {1} match {2}'.format(c.m.name , c.m.device_type, c.m.slot_type))
        post('engineering',{'name':c.m.name, 'device_type':c.m.device_type, 'slot_type':c.m.slot_type, 'slot_en':1})
      else:
        print('{0} 슬롯타입 엔지니어링 실패 {1} 타입의 슬롯만 엔지니어링 가능합니다'.format(c.m.name, VB['slot_type']))        
    elif c.m.device_type == 'VC':      
      if c.m.slot_type in VC['slot_type']:
        print('{0} 슬롯타입 엔지니어링 성공 -> {1} match {2}'.format(c.m.name , c.m.device_type, c.m.slot_type))
        post('engineering',{'name':c.m.name, 'device_type':c.m.device_type, 'slot_type':c.m.slot_type, 'slot_en':1})
      else:
        print('{0} 슬롯타입 엔지니어링 실패 {1} 타입의 슬롯만 엔지니어링 가능합니다'.format(c.m.name, VC['slot_type']))        
    elif c.m.device_type == 'SA':      
      if c.m.slot_type in SA['slot_type']:
        print('{0} 슬롯타입 엔지니어링 성공 -> {1} match {2}'.format(c.m.name , c.m.device_type, c.m.slot_type))
        post('engineering',{'name':c.m.name, 'device_type':c.m.device_type, 'slot_type':c.m.slot_type, 'slot_en':1})
      else:
        print('{0} 슬롯타입 엔지니어링 실패 {1} 타입의 슬롯만 엔지니어링 가능합니다'.format(c.m.name, SA['slot_type']))        
    else:
        print('{0} 슬롯타입 엔지니어링 실패 지원하지않는 디바이스 타입입니다.'.format(c.m.name))
        
  #슬롯별 센서개수 카운팅
  @when_all((m.slot_en == 1) & (m.device_type == 'VA') & (m.slot_type == 'Elect')) #디바이스타입이VA이고, 슬롯타입이 Elect인경우
  def sensorCountVAelect(c):
    c.assert_fact('engineering',{'name':c.m.name, 'device_type':c.m.device_type, 'slot_type':c.m.slot_type, 'sensor_count':3})
  @when_all((m.slot_en == 1) & (m.device_type == 'VB') & (m.slot_type == 'Elect')) #디바이스타입이VB이고, 슬롯타입이 Elect인경우
  def sensorCountVBelect(c):
    c.assert_fact('engineering',{'name':c.m.name, 'device_type':c.m.device_type, 'slot_type':c.m.slot_type, 'sensor_count':4})
  @when_all((m.slot_en == 1) & (m.device_type == 'VB') & (m.slot_type == 'Temp')) #디바이스타입이VB이고, 슬롯타입이 Temp인경우
  def sensorCountVBtemp(c):
    c.assert_fact('engineering',{'name':c.m.name, 'device_type':c.m.device_type, 'slot_type':c.m.slot_type, 'sensor_count':4})
  @when_all((m.slot_en == 1) & (m.device_type == 'VC') & (m.slot_type == 'Elect')) #디바이스타입이VC이고, 슬롯타입이 Elect인경우
  def sensorCountVCelect(c):
  	c.assert_fact('engineering',{'name':c.m.name, 'device_type':c.m.device_type, 'slot_type':c.m.slot_type, 'sensor_count':4})
  @when_all((m.slot_en == 1) & (m.device_type == 'VC') & (m.slot_type == 'Temp')) #디바이스타입이VC이고, 슬롯타입이 Temp인경우
  def sensorCountVCtemp(c):
  	c.assert_fact('engineering',{'name':c.m.name, 'device_type':c.m.device_type, 'slot_type':c.m.slot_type, 'sensor_count':4})
  @when_all((m.slot_en == 1) & (m.device_type == 'SA') & (m.slot_type == 'Elect')) #디바이스타입이SA이고, 슬롯타입이 Elect인경우
  def sensorCountSAelect(c):
  	c.assert_fact('engineering',{'name':c.m.name, 'device_type':c.m.device_type, 'slot_type':c.m.slot_type, 'sensor_count':0})
  @when_all((m.slot_en == 1) & (m.device_type == 'SA') & (m.slot_type == 'Temp')) #디바이스타입이SA이고, 슬롯타입이 Temp인경우
  def sensorCountSAtemp(c):
  	c.assert_fact('engineering',{'name':c.m.name, 'device_type':c.m.device_type, 'slot_type':c.m.slot_type, 'sensor_count':0})
  @when_all((m.slot_en == 1) & (m.device_type == 'SA') & (m.slot_type == 'Humi')) #디바이스타입이SA이고, 슬롯타입이 Humi인경우
  def sensorCountSAhumi(c):
  	c.assert_fact('engineering',{'name':c.m.name, 'device_type':c.m.device_type, 'slot_type':c.m.slot_type, 'sensor_count':0})
   
  #센서개수출력
  @when_all((+m.sensor_count) & (m.sensor_count > 0)) #센서개수출력
  def outputSensorCount(c):
  	print('{0} : {1}개의 센서를 사용할 수 있습니다'.format(c.m.name, c.m.sensor_count))
  @when_all((+m.sensor_count) & (m.sensor_count == 0))
  def outputSensorCountZero(c):
  	print('{0} : 별도의 센서를 사용할 수 없습니다. 고정 슬롯입니다.'.format(c.m.name))
   
  #센서카테고리지정, 센서별종류지정
  @when_all((m.slot_type == 'Elect') & (m.sensor_count == 3)) #슬롯타입이Elect이고,세개의센서일 경우
  def sensorCategoryElect(c):    
    c.assert_fact({'name':c.m.name, 'device_type':c.m.device_type, 'slot_type':c.m.slot_type, 'sensor_category':'elect'}) #센서카테고리지정
  @when_all(m.sensor_category == 'elect')	
  def outputSensorTypeElect(c):    
    print('{0}의 첫번째 Sensor Type : {1}, 두번째 Sensor Type : {2}, 세번째 Sensor Type : {3}'.format(c.m.name, sensor_elect_3[0], sensor_elect_3[1], sensor_elect_3[2]))
  @when_all((m.slot_type == 'Elect') & (m.sensor_count == 4)) #슬롯타입이Elect이고,네개의센서일 경우
  def sensorCategoryDefault(c):
  	c.assert_fact({'name':c.m.name, 'device_type':c.m.device_type, 'slot_type':c.m.slot_type, 'sensor_category':'default'}) #센서카테고리지정
  @when_all(m.sensor_category == 'default')	
  def outputSensorTypeUHF(c):
  	print('{0} Sensor type only UHF! 해당 디바이스는 UHF센서만 사용가능합니다'.format(c.m.name))
  @when_all((m.slot_type == 'Temp') & (m.sensor_count == 4)) #슬롯타입이Temp이고,네개의센서일 경우
  def sensorCategoryTemp(c):
  	c.assert_fact({'name':c.m.name, 'device_type':c.m.device_type, 'slot_type':c.m.slot_type, 'sensor_category':'temp'}) #센서카테고리지정
  @when_all(m.sensor_category == 'temp')	
  def outputSensorTypeTemp(c):
  	print('{0}의 첫번째 Sensor Type : {1}, 두번째 Sensor Type : {2}, 세번째 Sensor Type : {3} , 네번째 Sensor Type : {3}'.format(c.m.name, sensor_temp_4[0], sensor_temp_4[1], sensor_temp_4[2], sensor_temp_4[3]))


post('engineering',{'name':'디바이스1', 'device_type':'VA', 'slot_type':'Elect', 'slot_en' : -1})
post('engineering',{'name':'디바이스2', 'device_type':'VA', 'slot_type':'Temp', 'slot_en' : -1})
post('engineering',{'name':'디바이스3', 'device_type':'VB', 'slot_type':'Elect', 'slot_en' : -1})
post('engineering',{'name':'디바이스4', 'device_type':'VB', 'slot_type':'Temp', 'slot_en' : -1})
post('engineering',{'name':'디바이스5', 'device_type':'VB', 'slot_type':'Humi', 'slot_en' : -1})
post('engineering',{'name':'디바이스6', 'device_type':'VC', 'slot_type':'Elect', 'slot_en' : -1})
post('engineering',{'name':'디바이스7', 'device_type':'TT', 'slot_type':'Elect', 'slot_en' : -1})
post('engineering',{'name':'디바이스8', 'device_type':'SA', 'slot_type':'Humi', 'slot_en' : -1})
post('engineering',{'name':'디바이스9', 'device_type':'SA', 'slot_type':'Temp', 'slot_en' : -1})
